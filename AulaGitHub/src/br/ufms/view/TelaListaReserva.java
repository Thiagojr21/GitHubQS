/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufms.view;

import br.ufms.bean.Automovel;
import br.ufms.bean.ClienteFisico;
import br.ufms.bean.ClienteJuridico;
import br.ufms.bean.Reserva;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author olimpio
 */
public class TelaListaReserva extends javax.swing.JFrame {
    private ArrayList<Reserva> lista;
    private Reserva reservaSelecionada;
    private boolean flag;
    /**
     * Creates new form TelaListaReserva
     */
    public TelaListaReserva(){
        initComponents();
    }
    public TelaListaReserva(ArrayList<Reserva> lista,boolean flag) {
        initComponents();
        this.lista = lista;
        this.flag = flag;
        if(flag){
            btExcluir.setText("Alterar reserva");
        }
        atualizaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btExcluir = new javax.swing.JToggleButton();
        btCancelar = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reservas\n");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "CPF/CNPJ", "Data Retirada", "Data Devolução", "Descrição Automovel", "Categoria Automovel", "Valor desconto", "Taxa de Multa", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setToolTipText("uhsiuahf");
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabela);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 74, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Reservas");

        btExcluir.setText("Cancelar Reserva");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btCancelar.setText("Voltar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        jLabel2.setText("Selecione a reserva");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btCancelar)
                .addGap(149, 149, 149))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExcluir)
                    .addComponent(btCancelar))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void atualizaTabela(){
        DefaultTableModel model =(DefaultTableModel) tabela.getModel();
        model.setNumRows(0);
        for(Reserva x : this.lista){
            String nome;
        if(x.getClienteFisico() != null){
            nome = x.getClienteFisico().getNome();
        }else{
            nome = x.getClienteJuridico().getNome();
        }
        SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyyy");
        Date retirada = x.getDataRetirada();
        Date devolucao = x.getDataDevolucao();
        String dR = dt.format(retirada);  String dD = dt.format(devolucao);
        Automovel carro = x.getCarro();
        String descricaoCarro;
        if(carro != null)
            descricaoCarro = carro.getMarca() + " / "+ carro.getModelo();
        else
            descricaoCarro = " ";
        model.addRow(new Object[]{  
             nome,
             x.getCpfCnpj(),
             dR,
             dD,
             descricaoCarro,
             x.getCategoria().getcodCategoria(),
             x.getDesconto(),
             x.getTaxaMulta(),
             x.getLocacao()}
        );
        }
    }
    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
         if(reservaSelecionada != null){
             if(flag == false){
             int linha = tabela.getSelectedRow();
             Reserva x = lista.get(linha);
             boolean auxCliente;
             if(x.getClienteFisico() != null)
                 auxCliente = true;
             else
                 auxCliente = false;
             //data e hora atuais
             Date data = new Date();
             Calendar c = Calendar.getInstance();
             c.setTime(data);
             int diaAtual = c.get(Calendar.DAY_OF_MONTH);
             int mesAtual = c.get(Calendar.MONTH);
             int anoAtual = c.get(Calendar.YEAR);
             //data da Devolução
             Date data2 = x.getDataRetirada();
             Calendar c2 = Calendar.getInstance();
             c2.setTime(data2);
             int diaRet = c2.get(Calendar.DAY_OF_MONTH);
             int mesRet = c2.get(Calendar.MONTH);
             int anoRet = c2.get(Calendar.YEAR);
             if (diaAtual == diaRet && mesAtual == mesRet && anoAtual == anoRet) {
                 int hrAtual = c.get(Calendar.HOUR_OF_DAY);
                 int minAtual = c.get(Calendar.MINUTE);
                 int hrRet = c2.get(Calendar.HOUR_OF_DAY);
                 int minRet = c2.get(Calendar.MINUTE);
                if (hrRet < hrAtual) {
                    int res = JOptionPane.showConfirmDialog(null, "Cancelamento fora do prazo do horario cobrar MULTA do cliente\ndeseja excluir a reserva");
                    if(auxCliente)
                        reservaSelecionada.getClienteFisico().setSituaçao_de_inadimplência(false);
                    else
                        reservaSelecionada.getClienteJuridico().setSituaçao_de_inadimplência(false);
                    if (res == 0) {
                        if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                            lista.remove(reservaSelecionada);
                            JOptionPane.showMessageDialog(null, "Reserva Excluida");
                            this.atualizaTabela();
                            this.revalidate();
                        } else {
                            JOptionPane.showMessageDialog(null, "erro ao excluir");
                        }
                    }
                } else {
                    int diferenca = ((hrRet * 60) + minRet) - ((hrAtual * 60) + minAtual);
                    if (diferenca <= 240) {
                        int res = JOptionPane.showConfirmDialog(null, "Cancelamento fora do prazo do horario cobrar MULTA do cliente\ndeseja excluir a reserva");
                        if(auxCliente)
                            reservaSelecionada.getClienteFisico().setSituaçao_de_inadimplência(false);
                        else
                            reservaSelecionada.getClienteJuridico().setSituaçao_de_inadimplência(false);
                        if (res == 0) {
                            if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                                lista.remove(reservaSelecionada);
                                JOptionPane.showMessageDialog(null, "Reserva Excluida");
                                this.atualizaTabela();
                                this.revalidate();
                            } else {
                                JOptionPane.showMessageDialog(null, "erro ao excluir");
                            }
                        }
                    } else if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                        lista.remove(reservaSelecionada);
                        JOptionPane.showMessageDialog(null, "Reserva Excluida");
                        this.atualizaTabela();
                        this.revalidate();
                    } else {
                        JOptionPane.showMessageDialog(null, "erro ao excluir");
                        
                    }
                }
            } else if (diaRet < diaAtual && mesRet == mesAtual && anoRet == anoAtual) {
                int res = JOptionPane.showConfirmDialog(null, "Cancelamento fora do prazo cobrar MULTA do cliente\ndeseja excluir a reserva");
                if(auxCliente)
                        reservaSelecionada.getClienteFisico().setSituaçao_de_inadimplência(false);
                    else
                        reservaSelecionada.getClienteJuridico().setSituaçao_de_inadimplência(false);
                if (res == 0) {
                    if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                        lista.remove(reservaSelecionada);
                        JOptionPane.showMessageDialog(null, "Reserva Excluida");
                        this.atualizaTabela();
                        this.revalidate();
                    } else {
                        JOptionPane.showMessageDialog(null, "erro ao excluir");
                    }
                }
            } else if (anoRet < anoAtual) {
                int res = JOptionPane.showConfirmDialog(null, "Cancelamento fora do prazo cobrar MULTA do cliente\ndeseja excluir a reserva");
                if(auxCliente)
                        reservaSelecionada.getClienteFisico().setSituaçao_de_inadimplência(false);
                    else
                        reservaSelecionada.getClienteJuridico().setSituaçao_de_inadimplência(false);
                if (res == 0) {
                    if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                        lista.remove(reservaSelecionada);
                        JOptionPane.showMessageDialog(null, "Reserva Excluida");
                        this.atualizaTabela();
                        this.revalidate();
                    } else {
                        JOptionPane.showMessageDialog(null, "erro ao excluir");
                    }
                }
            } else if (mesRet < mesAtual && anoRet == anoAtual) {
                int res = JOptionPane.showConfirmDialog(null, "Cancelamento fora do prazo cobrar MULTA do cliente\ndeseja excluir a reserva");
                if(auxCliente)
                        reservaSelecionada.getClienteFisico().setSituaçao_de_inadimplência(false);
                    else
                        reservaSelecionada.getClienteJuridico().setSituaçao_de_inadimplência(false);
                if (res == 0) {
                    if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                        lista.remove(reservaSelecionada);
                        JOptionPane.showMessageDialog(null, "Reserva Excluida");
                        this.atualizaTabela();
                        this.revalidate();
                    } else {
                        JOptionPane.showMessageDialog(null, "erro ao excluir");
                    }
                }
            } else if (reservaSelecionada.removerReserva(reservaSelecionada.getCpfCnpj())) {
                lista.remove(reservaSelecionada);
                JOptionPane.showMessageDialog(null, "Reserva Excluida");
                this.atualizaTabela();
                this.revalidate();
            } else {
                JOptionPane.showMessageDialog(null, "erro ao excluir");
            }
         }else{
            CadastroReserva c = new CadastroReserva(reservaSelecionada);
            c.setVisible(true);
            this.dispose();
          }
        } else {
            JOptionPane.showMessageDialog(null, "selecione a reserva");
        }
             
    }//GEN-LAST:event_btExcluirActionPerformed

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        int linha = tabela.getSelectedRow(); // retorna a linha selecionada pelo usuario
        this.reservaSelecionada = this.lista.get(linha);
    }//GEN-LAST:event_tabelaMouseClicked

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaListaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaListaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaListaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaListaReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaListaReserva().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btCancelar;
    private javax.swing.JToggleButton btExcluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
